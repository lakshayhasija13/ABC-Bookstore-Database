Retrieve a list of all books along with their authors:

SELECT Book.title, Author.name AS author
FROM Book
JOIN Author ON Book.author_id = Author.author_id;

Find the total sales for a specific customer:

SELECT Customer.name, SUM(Order.total_price) AS total_sales
FROM Customer
JOIN Order ON Customer.customer_id = Order.customer_id
GROUP BY Customer.name;

List all customers who have not placed any orders:

SELECT *
FROM Customer
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Order);

Identify the top-selling books (based on quantity sold):

SELECT Book.title, SUM(OrderItem.quantity) AS total_quantity_sold
FROM Book
JOIN OrderItem ON Book.book_id = OrderItem.book_id
GROUP BY Book.title
ORDER BY total_quantity_sold DESC;

Calculate the revenue generated by each category:

SELECT Category.name, SUM(OrderItem.subtotal) AS category_revenue
FROM Category
JOIN Book ON Category.category_id = Book.category_id
JOIN OrderItem ON Book.book_id = OrderItem.book_id
GROUP BY Category.name;

Update the quantity_in_stock for a specific book after a new order:

-- Assuming you want to decrease the quantity_in_stock after an order
UPDATE Book
SET quantity_in_stock = quantity_in_stock - <quantity_sold>
WHERE book_id = <book_id>;
